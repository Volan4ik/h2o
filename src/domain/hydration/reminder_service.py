import asyncio
import logging
from datetime import datetime, timedelta
from typing import List, Optional
import pytz
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger
from sqlmodel import select, func
from aiogram import Bot

from src.shared.config import settings
from src.shared.db import session
from src.shared.models import User, WaterLog

logger = logging.getLogger(__name__)


class HydrationReminderService:
    """
    –°–µ—Ä–≤–∏—Å —É–º–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ –ø–∏—Ç—å–µ –≤–æ–¥—ã.
    
    –õ–æ–≥–∏–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:
    - –ú–∞–∫—Å–∏–º—É–º 3-4 —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –¥–µ–Ω—å
    - –û–∫–Ω–æ —Ç–∏—à–∏–Ω—ã: 22:00 - 07:00
    - –£—Ç—Ä–æ (8-10): –µ—Å–ª–∏ –≤—ã–ø–∏—Ç–æ <200 –º–ª
    - –î–µ–Ω—å (12-14): –µ—Å–ª–∏ –≤—ã–ø–∏—Ç–æ <40% –¥–Ω–µ–≤–Ω–æ–π —Ü–µ–ª–∏
    - –í–µ—á–µ—Ä (18-20): –µ—Å–ª–∏ –≤—ã–ø–∏—Ç–æ <70-80% –¥–Ω–µ–≤–Ω–æ–π —Ü–µ–ª–∏
    - –ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –æ—Ç—Å—Ç–∞–≤–∞–Ω–∏–µ (21:00): –µ—Å–ª–∏ –¥–∞–ª–µ–∫–æ –¥–æ —Ü–µ–ª–∏
    """
    
    def __init__(self, bot: Bot):
        self.bot = bot
        self.scheduler = AsyncIOScheduler()
        self.default_tz = pytz.timezone(settings.DEFAULT_TZ)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ø—Ä–æ–≤–µ—Ä–æ–∫
        self.check_times = [
            (8, "morning"),   # –£—Ç—Ä–æ
            (10, "morning"),  # –£—Ç—Ä–æ (–¥—É–±–ª–∏—Ä—É–µ–º –¥–ª—è –ø–æ–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞)
            (12, "day"),      # –î–µ–Ω—å
            (14, "day"),      # –î–µ–Ω—å (–¥—É–±–ª–∏—Ä—É–µ–º)
            (18, "evening"),  # –í–µ—á–µ—Ä
            (20, "evening"),  # –í–µ—á–µ—Ä (–¥—É–±–ª–∏—Ä—É–µ–º)
            (21, "critical"), # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –æ—Ç—Å—Ç–∞–≤–∞–Ω–∏–µ
        ]
        
        # –°—á–µ—Ç—á–∏–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        self.daily_notifications = {}
        
    async def start(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π."""
        logger.info("–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ –ø–∏—Ç—å–µ –≤–æ–¥—ã")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏
        for hour, period in self.check_times:
            self.scheduler.add_job(
                self.check_and_notify,
                CronTrigger(hour=hour, minute=0, timezone=settings.DEFAULT_TZ),
                args=[hour, period],
                id=f"hydration_check_{hour}",
                replace_existing=True
            )
        
        # –ó–∞–¥–∞—á–∞ –¥–ª—è —Å–±—Ä–æ—Å–∞ —Å—á–µ—Ç—á–∏–∫–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ –ø–æ–ª–Ω–æ—á—å
        self.scheduler.add_job(
            self._reset_daily_counters,
            CronTrigger(hour=0, minute=0, timezone=settings.DEFAULT_TZ),
            id="reset_daily_counters",
            replace_existing=True
        )
        
        self.scheduler.start()
        logger.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∑–∞–ø—É—â–µ–Ω")
    
    async def stop(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫."""
        if self.scheduler.running:
            self.scheduler.shutdown()
            logger.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    async def _reset_daily_counters(self):
        """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å—á–µ—Ç—á–∏–∫–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π."""
        self.daily_notifications.clear()
        logger.info("–°—á–µ—Ç—á–∏–∫–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å–±—Ä–æ—à–µ–Ω—ã")
    
    async def check_and_notify(self, hour: int, period: str):
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏.
        
        Args:
            hour: –ß–∞—Å –ø—Ä–æ–≤–µ—Ä–∫–∏
            period: –ü–µ—Ä–∏–æ–¥ –¥–Ω—è (morning, day, evening, critical)
        """
        logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –¥–ª—è —á–∞—Å–∞ {hour} ({period})")
        
        try:
            with session() as db:
                # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                users = db.exec(select(User)).all()
                
                for user in users:
                    try:
                        await self._check_user_hydration(db, user, hour, period)
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}: {e}")
                        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {e}")
    
    async def _check_user_hydration(self, db, user: User, hour: int, period: str):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≥–∏–¥—Ä–∞—Ç–∞—Ü–∏—é –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        user_tz = self.default_tz  # –ú–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö —Ç–∞–π–º–∑–æ–Ω
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–∫–Ω–æ —Ç–∏—à–∏–Ω—ã (22:00 - 07:00)
        if self._is_quiet_hours(hour):
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–º–∞–∫—Å–∏–º—É–º 4 –≤ –¥–µ–Ω—å)
        user_key = f"{user.id}_{datetime.now().date()}"
        if self.daily_notifications.get(user_key, 0) >= 4:
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ —Å–µ–≥–æ–¥–Ω—è
        today_stats = self._get_today_hydration_stats(db, user, user_tz)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
        should_notify = self._should_send_reminder(user, today_stats, period)
        
        if should_notify:
            await self._send_reminder(user, today_stats, period)
            self.daily_notifications[user_key] = self.daily_notifications.get(user_key, 0) + 1
    
    def _is_quiet_hours(self, hour: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ —á–∞—Å –≤ –æ–∫–Ω–µ —Ç–∏—à–∏–Ω—ã."""
        return hour >= 22 or hour < 7
    
    def _get_today_hydration_stats(self, db, user: User, user_tz) -> dict:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≥–∏–¥—Ä–∞—Ç–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞ —Å–µ–≥–æ–¥–Ω—è."""
        now = datetime.now(user_tz)
        start_of_day = now.replace(hour=0, minute=0, second=0, microsecond=0)
        end_of_day = now.replace(hour=23, minute=59, second=59, microsecond=999999)
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ UTC –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∫ –ë–î
        start_utc = start_of_day.astimezone(pytz.UTC)
        end_utc = end_of_day.astimezone(pytz.UTC)
        
        # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–ø–∏—Ç–æ–π –≤–æ–¥—ã –∑–∞ –¥–µ–Ω—å
        result = db.exec(
            select(func.sum(WaterLog.amount_ml))
            .where(WaterLog.user_id == user.id)
            .where(WaterLog.ts_utc >= start_utc)
            .where(WaterLog.ts_utc <= end_utc)
        ).first()
        
        total_ml = result or 0
        progress_percent = (total_ml / user.goal_ml) * 100 if user.goal_ml > 0 else 0
        
        return {
            "total_ml": total_ml,
            "goal_ml": user.goal_ml,
            "progress_percent": progress_percent,
            "remaining_ml": max(0, user.goal_ml - total_ml),
            "current_hour": now.hour
        }
    
    def _should_send_reminder(self, user: User, stats: dict, period: str) -> bool:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ."""
        total_ml = stats["total_ml"]
        goal_ml = stats["goal_ml"]
        progress_percent = stats["progress_percent"]
        
        if period == "morning":
            # –£—Ç—Ä–æ: –Ω–∞–ø–æ–º–Ω–∏—Ç—å, –µ—Å–ª–∏ –≤—ã–ø–∏—Ç–æ <200 –º–ª
            return total_ml < 200
            
        elif period == "day":
            # –î–µ–Ω—å: –Ω–∞–ø–æ–º–Ω–∏—Ç—å, –µ—Å–ª–∏ –≤—ã–ø–∏—Ç–æ <40% –¥–Ω–µ–≤–Ω–æ–π —Ü–µ–ª–∏
            return progress_percent < 40
            
        elif period == "evening":
            # –í–µ—á–µ—Ä: –Ω–∞–ø–æ–º–Ω–∏—Ç—å, –µ—Å–ª–∏ –≤—ã–ø–∏—Ç–æ <70% –¥–Ω–µ–≤–Ω–æ–π —Ü–µ–ª–∏
            return progress_percent < 70
            
        elif period == "critical":
            # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –æ—Ç—Å—Ç–∞–≤–∞–Ω–∏–µ: –µ—Å–ª–∏ –≤—ã–ø–∏—Ç–æ <50% –¥–Ω–µ–≤–Ω–æ–π —Ü–µ–ª–∏
            return progress_percent < 50
            
        return False
    
    async def _send_reminder(self, user: User, stats: dict, period: str):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""
        message = self._generate_reminder_message(user, stats, period)
        
        try:
            await self.bot.send_message(
                chat_id=user.tg_id,
                text=message,
                parse_mode="HTML"
            )
            logger.info(f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.id} ({period})")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.id}: {e}")
    
    def _generate_reminder_message(self, user: User, stats: dict, period: str) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è."""
        total_ml = stats["total_ml"]
        goal_ml = stats["goal_ml"]
        progress_percent = stats["progress_percent"]
        remaining_ml = stats["remaining_ml"]
        
        # –≠–º–æ–¥–∑–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–µ—Ä–∏–æ–¥–∞
        emoji_map = {
            "morning": "üåÖ",
            "day": "‚òÄÔ∏è", 
            "evening": "üåÜ",
            "critical": "‚ö†Ô∏è"
        }
        
        emoji = emoji_map.get(period, "üíß")
        
        # –ë–∞–∑–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if period == "morning":
            message = f"{emoji} <b>–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ!</b>\n\n"
            message += f"–í—Ä–µ–º—è –Ω–∞—á–∞—Ç—å –¥–µ–Ω—å —Å –≤–æ–¥—ã! –í—ã–ø–µ–π—Ç–µ —Å—Ç–∞–∫–∞–Ω—á–∏–∫ üíß\n\n"
            message += f"üìä –ó–∞ —Å–µ–≥–æ–¥–Ω—è: {total_ml} –º–ª –∏–∑ {goal_ml} –º–ª"
            
        elif period == "day":
            message = f"{emoji} <b>–í—Ä–µ–º—è –¥–ª—è –≤–æ–¥—ã!</b>\n\n"
            message += f"–í—ã –≤—ã–ø–∏–ª–∏ {progress_percent:.0f}% –æ—Ç –¥–Ω–µ–≤–Ω–æ–π —Ü–µ–ª–∏.\n"
            message += f"–û—Å—Ç–∞–ª–æ—Å—å {remaining_ml} –º–ª –¥–æ —Ü–µ–ª–∏ üéØ\n\n"
            message += f"üí° –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –≤—ã–ø–∏—Ç—å {user.default_glass_ml} –º–ª –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!"
            
        elif period == "evening":
            message = f"{emoji} <b>–ù–µ –∑–∞–±—ã–≤–∞–π—Ç–µ –æ –≤–æ–¥–µ!</b>\n\n"
            message += f"–ü—Ä–æ–≥—Ä–µ—Å—Å: {progress_percent:.0f}% ({total_ml}/{goal_ml} –º–ª)\n"
            message += f"–û—Å—Ç–∞–ª–æ—Å—å {remaining_ml} –º–ª –¥–æ —Ü–µ–ª–∏ üéØ\n\n"
            message += f"üíß –í—ã–ø–µ–π—Ç–µ {user.default_glass_ml} –º–ª –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –≥–∏–¥—Ä–∞—Ç–∞—Ü–∏–∏"
            
        elif period == "critical":
            message = f"{emoji} <b>–ü–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–Ω—Å!</b>\n\n"
            message += f"–î–µ–Ω—å –ø–æ–¥—Ö–æ–¥–∏—Ç –∫ –∫–æ–Ω—Ü—É, –∞ –≤—ã –≤—ã–ø–∏–ª–∏ —Ç–æ–ª—å–∫–æ {progress_percent:.0f}% –æ—Ç —Ü–µ–ª–∏.\n"
            message += f"–û—Å—Ç–∞–ª–æ—Å—å {remaining_ml} –º–ª –¥–æ {goal_ml} –º–ª üéØ\n\n"
            message += f"‚è∞ –ü–æ—Ä–∞ –Ω–∞–≤–µ—Ä—Å—Ç–∞—Ç—å —É–ø—É—â–µ–Ω–Ω–æ–µ! –í—ã–ø–µ–π—Ç–µ {user.default_glass_ml} –º–ª"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ—Ä–∞–∑—ã
        motivational_phrases = [
            "–í—ã —Å–ø—Ä–∞–≤–∏—Ç–µ—Å—å! üí™",
            "–ö–∞–∂–¥–∞—è –∫–∞–ø–ª—è –Ω–∞ —Å—á–µ—Ç—É! üíß",
            "–í–∞—à–µ –∑–¥–æ—Ä–æ–≤—å–µ –≤–∞–∂–Ω–µ–µ –≤—Å–µ–≥–æ! ‚ù§Ô∏è",
            "–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ! üåü"
        ]
        
        import random
        message += f"\n\n{random.choice(motivational_phrases)}"
        
        return message
    
    async def get_user_stats(self, user_id: int) -> Optional[dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞ —Å–µ–≥–æ–¥–Ω—è (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)."""
        try:
            with session() as db:
                user = db.get(User, user_id)
                if not user:
                    return None
                
                stats = self._get_today_hydration_stats(db, user, self.default_tz)
                return {
                    "user_id": user_id,
                    "goal_ml": user.goal_ml,
                    "default_glass_ml": user.default_glass_ml,
                    **stats
                }
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            return None
